---
title: "GGP-GGS izlases sagatavošana"
subtitle: "Latvija, 2025"
author: "Mārtiņš Liberts"
date: today
format:
  html:
    embed-resources: true
    page-layout: full
    toc: true
    toc-depth: 2
    toc-title: Satura rādītājs
execute:
  echo: false
lang: lv-LV
language: 
  title-block-author-single: "Autors"
  title-block-published: "Datums"
---

# Latvijas privāto mājokļu ietvara sagatavošana

## Dati no CSP par pastāvīgi apdzīvotiem privātajiem mājokļiem

No CSP ir saņemts privāto mājokļu ietvars, kas ietver visus Latvijas privātos mājokļus ar vismaz vienu pastāvīgo mājokļa iedzīvotāju.

```{r CSP frame}
#| output: false
library(data.table)
library(gt)
library(purrr)
library(leaflet)
library(leaflet.extras)

frame_csp <- fread(
  file = file.path(config::get("dir.data"), "frame_csp.csvy.gz"),
  yaml = TRUE
)

# Trim
frame_csp[, pers_kopa_trim := fifelse(pers_sk < 10L, pers_sk, 10L)]
frame_csp[, pers_1859_trim := fifelse(pers_sk_1859 < 10L, pers_sk_1859, 10L)]

frame_csp[, pers_kopa_trim := factor(pers_kopa_trim, 0:10, c(0:9, "10+"))]
frame_csp[, pers_1859_trim := factor(pers_1859_trim, 0:10, c(0:9, "10+"))]

oc.rate <- frame_csp[, round(100 * sum(pers_sk_1859 == 0L) / .N, 1)]
```

Katram mājoklim ir zināms kopīgais pastāvīgo iedzīvotāju skaits, kā arī iedzīvotāju skaits vecumā 18--59 gadi, kas ir GGS mērķa populācija.

Ietvarā ir `r frame_csp[, prettyNum(.N, big.mark = ",")]` mājokļi, no kuriem `r frame_csp[, prettyNum(sum(pers_sk_1859 == 0L), big.mark = ",")]` (`r oc.rate` %) mājokļos nav reģistrēta neviena persona vecumā 18--59 gadi.

**Ierosinājums (saskaņots 2025-06-10):** GGS populācijas ietvarā ietvert tikai tos privātos mājokļus, kuros ir reģistrēta vismaz viena persona vecumā 18--59 gadi. Tādi kopā ir `r prettyNum(frame_csp[, sum(pers_sk_1859 > 0L)], big.mark = ",")` mājokļi.

**Apsvērumi:**

- GGS populācijas ietvarā saglabājot visus privātos mājokļus ir sagaidāms augsts virspārklājums (apsekojumam nederīgi mājokļi). Sagaidāmais virspārklājums būtu `r oc.rate` %.
- Ir jāņem vērā, ka šādā veidā mēs potenciāli palielinām GGS mērķa populācijas nenoklājumu (personas vecumā 18--59 gadi), jo diezgan droši daļā no izslēgtajiem mājokļiem būs tādi, kuros faktiski dzīvo GGS mērķa populācijai piederošas personas. Šobrīd nav iespējams novērtēt ietekmi uz nenoklājumu. Mērķa populācijas kopīgo nenoklājumu var vērtēt pēc GGS apsekojuma datu savākšanas.

```{r CSP tables}
tab_csp <- frame_csp[, .(n = .N), keyby = .(pers_kopa_trim, pers_1859_trim)]
tab_csp[, p := prop.table(n)]

tab_csp <- rbindlist(
  list(
    tab_csp,
    tab_csp[, map(.SD, sum), .SDcols = c("n", "p"), keyby = .(pers_kopa_trim)],
    tab_csp[, map(.SD, sum), .SDcols = c("n", "p"), keyby = .(pers_1859_trim)],
    tab_csp[, map(.SD, sum), .SDcols = c("n", "p")]
  ),
  fill = TRUE
)

tab_csp[is.na(pers_kopa_trim), pers_kopa_trim := "Kopā"]
tab_csp[is.na(pers_1859_trim), pers_1859_trim := "Kopā"]

tab_csp_n <- dcast.data.table(
  tab_csp,
  pers_kopa_trim ~ pers_1859_trim,
  value.var = "n"
)

tab_csp_p <- dcast.data.table(
  tab_csp,
  pers_kopa_trim ~ pers_1859_trim,
  value.var = "p"
)

gt(tab_csp_n) |>
  tab_caption("Privāto mājokļu skaits") |>
  tab_spanner(
    label = "Mājokļa personu skaits vecumā 18--59",
    columns = matches("\\d")
  ) |>
  cols_label(
    pers_kopa_trim = "Personu skaits mājoklī"
  ) |>
  cols_width(
    everything() ~ pct(100 / 13)
  ) |>
  fmt_number(decimals = 0) |>
  sub_missing(missing_text = "") |>
  tab_style(
    style = cell_fill(color = "#f0f0f0"),
    locations = cells_body(columns = "0")
  ) |>
  tab_options(
    table.width = pct(100),
    quarto.disable_processing = TRUE
  )

gt(tab_csp_p) |>
  tab_caption("Privāto mājokļu skaita īpatsvars") |>
  tab_spanner(
    label = "Mājokļa personu skaits vecumā 18--59",
    columns = matches("\\d")
  ) |>
  cols_label(
    pers_kopa_trim = "Personu skaits mājoklī"
  ) |>
  cols_width(
    everything() ~ pct(100 / 13)
  ) |>
  fmt_number(decimals = 2) |>
  sub_missing(missing_text = "") |>
  tab_style(
    style = cell_fill(color = "#f0f0f0"),
    locations = cells_body(columns = "0")
  ) |>
  tab_options(
    table.width = pct(100),
    quarto.disable_processing = TRUE
  )
```

## VZD Adrešu reģistra teksta dati

VZD dati tiek iegūti no <a href="https://data.gov.lv/dati/lv/dataset/varis-atvertie-dati" target="_blank">Latvijas Atvērto datu portāla</a>.


```{r VZD}
tab_vzd <- fread(
  file = file.path(config::get("dir.data"), "tab_vzd.csvy"),
  yaml = TRUE
)
```

Kopā VZD datos pēc datu apstrādes ir `r tab_vzd[, prettyNum(sum(N), big.mark = ",")]` adresācijas objekti. Ņemt vērā, ka šie dati satur visus adresācijas objektus - tai skaitā industriālās ēkas un neapdzīvotus mājokļus.

```{r VZD table}
gt(tab_vzd) |>
  tab_caption("Adresācijas objekti VZD Adrešu reģistra datos") |>
  cols_label(
    tips_cd = "Kods",
    tips_cd_nos = "Adresācijas objekta tips",
    N = "Skaits"
  ) |>
  grand_summary_rows(
    columns = "N",
    fns = Kopā ~ sum(.),
    fmt = ~ fmt_number(., decimals = 0)
  ) |>
  fmt_number(decimals = 0) |>
  tab_options(
    quarto.disable_processing = TRUE
  )
```


## Teritoriju kodi

Teritoriālo vienību, administratīvo teritoriju, reģionu un apkaimju kodi tiek pievienoti no Atvērto datu portāla:

- <a href="https://data.gov.lv/dati/dataset/robezas" target="_blank">Ģeneralizētas teritoriālo vienību robežas</a>
- <a href="https://data.gov.lv/dati/lv/dataset/apkaimes" target="_blank">Pilsētu apkaimes</a>


## GGS populācijas mājokļu ietvara sagatavošana

CSP mājokļu ietvars satur `r frame_csp[, prettyNum(sum(pers_sk_1859 > 0), big.mark = ",")]` mājokļos, kuros ir reģistrētas `r frame_csp[, prettyNum(sum(pers_sk_1859), big.mark = ",")]` personas vecumā 18--59 gadi.

Pirmajā solī no ietvara tiek dzēstas personas, kuras ir reģistrētas:

- ciemā - adrese ir norādīta tikai līdz ciemam (tips `106`),
- adreses, kas ir likvidētas (statuss `DEL`) vai kļūdainas (statuss `ERR`).

```{r GGS del1}
frame_majo_del1 <- fread(
  file = file.path(config::get("dir.data"), "frame_majo_del1.csvy.gz"),
  yaml = TRUE
)

frame_majo_del1[
  pers_sk_1859 > 0,
  .(
    majo_sk = .N,
    pers_sk_1859 = sum(pers_sk_1859)
  ),
  keyby = .(tips_cd, tips_cd_nos, statuss)
] |> gt() |>
  tab_caption("No ietvara izslēgti mājokļi un personas pirmajā solī") |>
  cols_label(
    tips_cd = "Tips (kods)",
    tips_cd_nos = "Tips (nosaukums)",
    statuss = "Statuss",
    majo_sk = "Mājokļu skaits",
    pers_sk_1859 = "Personu skaits (18--59)"
  ) |>
  grand_summary_rows(
    columns = c("majo_sk", "pers_sk_1859"),
    fns = Kopā ~ sum(.),
    fmt = ~ fmt_number(., decimals = 0)
  ) |>
  fmt_number(decimals = 0) |>
  tab_options(
    quarto.disable_processing = TRUE
  )
```

Otrajā solī no ietvara tiek dzēstas personas, kuras ir reģistrētas ēkā ar vairākiem dzīvokļiem, bet personas reģistrētā adrese ir norādīta tikai līdz ēkai -- nav zināms, kurā ēkas dzīvoklī persona ir reģistrēta.

```{r GGS del2}
frame_majo_del2 <- fread(
  file = file.path(config::get("dir.data"), "frame_majo_del2.csvy.gz"),
  yaml = TRUE
)

frame_majo_del2[
  pers_sk_1859 > 0,
  .(
    majo_sk = .N,
    pers_sk_1859 = sum(pers_sk_1859)
  ),
  keyby = .(tips_cd, tips_cd_nos, statuss)
] |> gt() |>
  tab_caption("No ietvara izslēgti mājokļi un personas otrajā solī") |>
  cols_label(
    tips_cd = "Tips (kods)",
    tips_cd_nos = "Tips (nosaukums)",
    statuss = "Statuss",
    majo_sk = "Mājokļu skaits",
    pers_sk_1859 = "Personu skaits (18--59)"
  ) |>
  grand_summary_rows(
    columns = c("majo_sk", "pers_sk_1859"),
    fns = Kopā ~ sum(.),
    fmt = ~ fmt_number(., decimals = 0)
  ) |>
  fmt_number(decimals = 0) |>
  tab_options(
    quarto.disable_processing = TRUE
  )
```

```{r frame GGS}
frame_majo <- fread(
  file = file.path(config::get("dir.data"), "frame_majo_samp.csvy.gz"),
  yaml = TRUE
)
```

Rezultātā GGS mājokļu ietvarā ir iekļauti **`r frame_majo[, prettyNum(.N, big.mark = ",")]` mājokļi**, kuros ir reģistrētas **`r frame_majo[, prettyNum(sum(pers_sk_1859), big.mark = ",")]` personas** vecumā 18--59 gadi.

# Mājokļu atlase

## Atlases plānojums

Izlase tiek veidota kā divpakāpju izlase, kur:

- pirmajā pakāpē tiek veidota gadījuma privāto mājokļu izlase,
- otrajā pakāpēc katrā izlases mājoklī tiek atlasīta viena persona ar vecumu 18-59 gadi.

Ir nepieciešams sagatavot pamatizlasi ar apjomu 25000 mājokļi un rezerves izlasi ar apjomu 5000 mājokļi. Kopā abas izlases viedo kopīgo izlasi. Praksē sākumā tiek sagatavota kopīgā izlase ar apjomu 30000 mājokļi. Pamatilzase tiek veidota kā apakšizlase kopīgajai izlasei. Atlikums no kopīgās izlases ir rezerves izlase.

## Pirmās pakāpes izlase

Pirmās pakāpes izlases vienība ir privātais mājoklis, kurā ir reģistrēts vismaz viena pastāvīgs iedzīvotājs vecumā 18-59 gadi.

Tiek izmantota tiešā stratifikācija pēc teritorijas tipa un administratīvā reģiona. Ir definēti četri teritoriju tipi:

- Rīga,
- Sešas valstspilsētas bez Rīgas, kas ir pašvaldības (Daugavpils, Jelgava, Jūrmala, Liepāja, Rēzekne, Ventspils),
- Novadu valstspilsētas (Jēkabpils, Ogre, Valmiera) un pilsētas
- Novadu pagasti.

Ir pieci administratīvie reģioni - Latgale, Zemgale, Rīga, Kurzeme, Vidzeme. Kopā teritorijas tips un reģions veido 15 stratas.

```{r sample allocation}
frame_majo[,
  .(
    n_pop = .N,
    n_sam_total = sum(sample_total),
    n_sam_main = sum(sample_main),
    n_sam_res = sum(sample_res)
  ),
  keyby = .(str_expl, pil_lauk_name, NUTS3_name)
] |> gt() |>
  tab_caption("Mājokļu tiešā stratifikācija") |>
  cols_label(
    str_expl = "Strata (tiešā)",
    pil_lauk_name = "Teritorijas tips",
    NUTS3_name = "Administratīvais reģions",
    n_pop = "Mājokļu skaits ietvarā",
    n_sam_total = "Mājokļu skaits kopīgajā izlasē",
    n_sam_main = "Mājokļu skaits pamatizlasē",
    n_sam_res = "Mājokļu skaits rezerves izlasē"
  ) |>
  grand_summary_rows(
    columns = c("n_pop", "n_sam_total", "n_sam_main", "n_sam_res"),
    fns = Kopā ~ sum(.),
    fmt = ~ fmt_number(., decimals = 0)
  ) |>
  fmt_number(decimals = 0) |>
  tab_options(
    quarto.disable_processing = TRUE
  )

```

Katrā tiešajā stratā mājokļi tiek sakārtoti sistemātiskās izlases vajadzībām. Mājokļi tiek sakārtoti pēc:

- Administratīvās teritorijas (valstspilsētas un novadi),
- Teritoriālās vienības (pilsētas un pagasti),
- Pilsētu apkaimes (apkaimes ir definētas četrām valstspilsētām - Rīgai, Daugavpilij, Jūrmalai un Valmierai),
- Ēkas,
- Dzīvokļa nosaukuma (numura).

Administratīvās teritorijas, teritoriālās vienības, pilsētu apkaimes, ēkas un dzīvokļi tiek kārtoti hierarhiski. Tas nozīmē - katrā reģionā tiek sakārtotas administratīvās teritorijas, tad katrā administratīvajā teritorijā tiek sakārtotas teritoriālās vienības utt.

Administratīvo teritoriju, teritoriālo vienību, pilsētu apkaimju un ēku sakārtošanai tiek izmantotas ģeogrāfiskās koordinātas, kas ir iegūtas no VZD Adrešu reģistra datiem. Vienības tiek sakārtotas tādā secībā, lai tās tiktu savienotas, izmantojot īsāko summāro distanci starp tām. Sakārtojuma noteikšana tiek veikta, atrisinot Ceļojošā tirgotāja problēmu (*Traveling Salesmen Problem*). Šāds vienību sakārtojums nodrošinās labu izlases ģeogrāfisko izkliedi.

Ņemot vērā to, ka otrajā atlases pakāpē tiks atlasīta viena atbilstoša izlases persona no izalses mājokļa, mājokļi tiek atlasīti ar \pips izlasi, kur vienību atlases varbūtības ir proporcionālas vienības lielumam. Šajā gadījumā izlases vienības (mājokļa) lielums tiek noteikts vienāds ar reģistrēto personu skaitu vecumā 18-59 gadi (CSP dati). Vienības lielums ir ierobežots no 1 līdz 10. Ja mājoklī ir reģistrētas vairāk kā 10 18-59 gadus vecas personas, tad mājokļa lielums tiek noteikts vienāds ar 10. Tas tiek veikts, lai izvairītos no ekstrēmi lielām atlases varbūtībām.

Rezultātā mājokļu atlases varbūtības pirmajā atlases pakāpē būs apgriesti proporcionālas personu atlases varbūtībām otrajā pakāpē, kas nodrošinās līdzīgas atlases varbūtības visām izlases personām. Šeit tiek pieņemts, ka mājoklī reģistrēto 18-59 vecuma personu skaits labi korelē ar faktisko 18-59 vecuma personu skaitu mājoklī.

```{r sample allocation by L0}
frame_majo[,
  .(
    n_pop = .N,
    n_sam_total = sum(sample_total),
    n_sam_main = sum(sample_main),
    n_sam_res = sum(sample_res)
  ),
  keyby = .(L0_code, L0_name)
] |> gt() |>
  tab_caption("Mājokļu ietvara un izlases sadalījums pēc administratīvajām teritorijām") |>
  cols_label(
    L0_code = "Administratīvās teritorijas kods",
    L0_name = "Administratīvās teritorijas nosaukums",
    n_pop = "Mājokļu skaits ietvarā",
    n_sam_total = "Mājokļu skaits kopīgajā izlasē",
    n_sam_main = "Mājokļu skaits pamatizlasē",
    n_sam_res = "Mājokļu skaits rezerves izlasē"
  ) |>
  grand_summary_rows(
    columns = c("n_pop", "n_sam_total", "n_sam_main", "n_sam_res"),
    fns = Kopā ~ sum(.),
    fmt = ~ fmt_number(., decimals = 0)
  ) |>
  fmt_number(decimals = 0) |>
  tab_options(
    quarto.disable_processing = TRUE
  )

```

## Otrās pakāpes izlase

Otrajā pakāpē no izlases mājokļa gadījuma veidā tiek atlasīta viena apsekojumam atbilstoša persona. Atlasi veic mājoklī dzīvojošās personas atbilstoši apsekojuma norādījumiem.

**Ir svarīgi respondentam norādīt, cik daudz pastāvīgie iedzīvotāji vecumā 18-59 gadi dzīvo izlases mājoklī.** Šī informācija ir obligāti nepieciešama, lai aprēķinātu otrās pakāpes atlases varbūtības un izlases plānojuma svarus. Datu vākšana ir jārgonizē tā, lai minimizētu datu iztrūkumu šim jautājumam.

## Izlases karte

```{r map}
#| column: screen

# Map
map_data <- frame_majo[
  sample_total == 1L,
  .(
    n = .N,
    popup_label = paste0(
      "Izlase: <b>", ifelse(sample_main, "pamata", "rezerves"), "</b>, ",
      "ID: ", adr_kods, ", ",
      adrese,
      collapse = "<br>"
    )
  ),
  keyby = .(adr_kods_eka, dd_e, dd_n)
]

# map_data[, sum(n)]

leaflet(data = map_data) %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addFullscreenControl() %>%
  addCircleMarkers(
    lng = ~dd_e,
    lat = ~dd_n,
    radius = ~n,  # scale the radius based on n
    popup = ~popup_label,
    stroke = TRUE,
    fillOpacity = 0.7,
    clusterOptions = markerClusterOptions()
  )

```

## Izlases saraksts

Izlases saraksts ir sagatavots divos formātos - CSV un XLSX. Abu failu saturs ir vienāds. Failos ir šādas kolonas:

| Nosaukums        | Apraksts                                                                 |
|------------------|--------------------------------------------------------------------------|
| id               | Izlases vienības ID (vienāds ar mājokļa adreses kodu `adr_kods`)         |
| str_expl         | Tiešās stratifikācijas mainīgais                                         |
| str_impl         | Netiešās stratifikācijas mainīgais (sakārtojums katrā tiešajā stratā)    |
| pil_lauk         | Teritorijas tipa kods (1--4)                                             |
| pil_lauk_name    | Teritorijas tipa nosaukums                                               |
| NUTS3_code       | NUTS3 līmeņa reģiona kods                                                |
| NUTS3_name       | NUTS3 līmeņa reģiona nosaukums                                           |
| L0_code          | Administratīvās teritorijas kods                                         |
| L0_name          | Administratīvās teritorijas nosaukums                                    |
| L1_code          | Teritoriālās vienības kods                                               |
| L1_name          | Teritoriālās vienības nosaukums                                          |
| apk_code         | Apkaimes kods                                                            |
| apk_name         | Apkaimes nosaukums                                                       |
| adr_kods_eka     | Ēkas adreses kods                                                        |
| koord_x          | Ģeogrāfiskās koordinātas X (LKS-92 projekcijā)                           |
| koord_y          | Ģeogrāfiskās koordinātas Y (LKS-92 projekcijā)                           |
| dd_e             | Ģeogrāfiskais garums (decimal grādos)                                    |
| dd_n             | Ģeogrāfiskais platums (decimal grādos)                                   |
| adr_kods         | Mājokļa adreses kods (vienāds ar `id`)                                   |
| tips_cd          | Adresācijas objekta tips (108 = ēka, 109 = dzīvoklis)                    |
| adrese           | Adrese (teksta formā)                                                    |
| pers_sk_1859     | Pastāvīgo iedzīvotāju skaits vecumā 18–59 g.                             |
| size             | Izlases vienības lielums (1-10)                                          |
| sample_total     | Vai iekļauts kopējā izlasē (1 = jā, 0 = nē)                              |
| pik_total        | Iekļaušanas varbūtība kopējā izlasē                                      |
| dw_st1_total     | Pirmās pakāpes plānojuma svars kopīgajai izlasei                         |
| sample_main      | Vai iekļauts pamatizlasē (1 = jā, 0 = nē)                                |
| pik_main         | Iekļaušanas varbūtība pamatizlasē                                        |
| dw_st1_main      | Pirmās pakāpes plānojuma svars pamatizlasei                              |
| sample_res       | Vai iekļauts rezerves izlasē (1 = jā, 0 = nē)                            |
